%!PS-Adobe-3.0
%%BoundingBox: 18 36 577 806
%%Title: Enscript Output
%%Creator: GNU Enscript 1.6.5.90
%%CreationDate: Thu Feb 18 03:27:16 2021
%%Orientation: Portrait
%%Pages: (atend)
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset Enscript-Prolog 1.6.5 90
%
% Procedures.
%

/_S {	% save current state
  /_s save def
} def
/_R {	% restore from saved state
  _s restore
} def

/S {	% showpage protecting gstate
  gsave
  showpage
  grestore
} bind def

/MF {	% fontname newfontname -> -	make a new encoded font
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  % insert only valid encoding vectors
  encoding_vector length 256 eq {
    newfont /Encoding encoding_vector put
  } if

  newfontname newfont definefont pop
} def

/MF_PS { % fontname newfontname -> -	make a new font preserving its enc
  /newfontname exch def
  /fontname exch def

  /fontdict fontname findfont def
  /newfont fontdict maxlength dict def

  fontdict {
    exch
    dup /FID eq {
      % skip FID pair
      pop pop
    } {
      % copy to the new font dictionary
      exch newfont 3 1 roll put
    } ifelse
  } forall

  newfont /FontName newfontname put

  newfontname newfont definefont pop
} def

/SF { % fontname width height -> -	set a new font
  /height exch def
  /width exch def

  findfont
  [width 0 0 height 0 0] makefont setfont
} def

/SUF { % fontname width height -> -	set a new user font
  /height exch def
  /width exch def

  /F-gs-user-font MF
  /F-gs-user-font width height SF
} def

/SUF_PS { % fontname width height -> -	set a new user font preserving its enc
  /height exch def
  /width exch def

  /F-gs-user-font MF_PS
  /F-gs-user-font width height SF
} def

/M {moveto} bind def
/s {show} bind def

/Box {	% x y w h -> -			define box path
  /d_h exch def /d_w exch def /d_y exch def /d_x exch def
  d_x d_y  moveto
  d_w 0 rlineto
  0 d_h rlineto
  d_w neg 0 rlineto
  closepath
} def

/bgs {	% x y height blskip gray str -> -	show string with bg color
  /str exch def
  /gray exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    gray setgray
    fill
  grestore
  x y M str s
} def

/bgcs { % x y height blskip red green blue str -> -  show string with bg color
  /str exch def
  /blue exch def
  /green exch def
  /red exch def
  /blskip exch def
  /height exch def
  /y exch def
  /x exch def

  gsave
    x y blskip sub str stringwidth pop height Box
    red green blue setrgbcolor
    fill
  grestore
  x y M str s
} def

% Highlight bars.
/highlight_bars {	% nlines lineheight output_y_margin gray -> -
  gsave
    setgray
    /ymarg exch def
    /lineheight exch def
    /nlines exch def

    % This 2 is just a magic number to sync highlight lines to text.
    0 d_header_y ymarg sub 2 sub translate

    /cw d_output_w cols div def
    /nrows d_output_h ymarg 2 mul sub lineheight div cvi def

    % for each column
    0 1 cols 1 sub {
      cw mul /xp exch def

      % for each rows
      0 1 nrows 1 sub {
        /rn exch def
        rn lineheight mul neg /yp exch def
        rn nlines idiv 2 mod 0 eq {
	  % Draw highlight bar.  4 is just a magic indentation.
	  xp 4 add yp cw 8 sub lineheight neg Box fill
	} if
      } for
    } for

  grestore
} def

% Line highlight bar.
/line_highlight {	% x y width height gray -> -
  gsave
    /gray exch def
    Box gray setgray fill
  grestore
} def

% Column separator lines.
/column_lines {
  gsave
    .1 setlinewidth
    0 d_footer_h translate
    /cw d_output_w cols div def
    1 1 cols 1 sub {
      cw mul 0 moveto
      0 d_output_h rlineto stroke
    } for
  grestore
} def

% Column borders.
/column_borders {
  gsave
    .1 setlinewidth
    0 d_footer_h moveto
    0 d_output_h rlineto
    d_output_w 0 rlineto
    0 d_output_h neg rlineto
    closepath stroke
  grestore
} def

% Do the actual underlay drawing
/draw_underlay {
  ul_style 0 eq {
    ul_str true charpath stroke
  } {
    ul_str show
  } ifelse
} def

% Underlay
/underlay {	% - -> -
  gsave
    0 d_page_h translate
    d_page_h neg d_page_w atan rotate

    ul_gray setgray
    ul_font setfont
    /dw d_page_h dup mul d_page_w dup mul add sqrt def
    ul_str stringwidth pop dw exch sub 2 div ul_h_ptsize -2 div moveto
    draw_underlay
  grestore
} def

/user_underlay {	% - -> -
  gsave
    ul_x ul_y translate
    ul_angle rotate
    ul_gray setgray
    ul_font setfont
    0 0 ul_h_ptsize 2 div sub moveto
    draw_underlay
  grestore
} def

% Page prefeed
/page_prefeed {		% bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} def

% Wrapped line markers
/wrapped_line_mark {	% x y charwith charheight type -> -
  /type exch def
  /h exch def
  /w exch def
  /y exch def
  /x exch def

  type 2 eq {
    % Black boxes (like TeX does)
    gsave
      0 setlinewidth
      x w 4 div add y M
      0 h rlineto w 2 div 0 rlineto 0 h neg rlineto
      closepath fill
    grestore
  } {
    type 3 eq {
      % Small arrows
      gsave
        .2 setlinewidth
        x w 2 div add y h 2 div add M
        w 4 div 0 rlineto
        x w 4 div add y lineto stroke

        x w 4 div add w 8 div add y h 4 div add M
        x w 4 div add y lineto
	w 4 div h 8 div rlineto stroke
      grestore
    } {
      % do nothing
    } ifelse
  } ifelse
} def

% EPSF import.

/BeginEPSF {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack
  userdict begin
  /showpage { } def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [ ] 0 setdash newpath
  /languagelevel where {
    pop languagelevel
    1 ne {
      false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/EndEPSF {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse
%%EndResource
%%BeginResource: procset Enscript-Encoding-88591 1.6.5 90
/encoding_vector [
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclam       	/quotedbl     	/numbersign   	
/dollar       	/percent      	/ampersand    	/quoteright   	
/parenleft    	/parenright   	/asterisk     	/plus         	
/comma        	/hyphen       	/period       	/slash        	
/zero         	/one          	/two          	/three        	
/four         	/five         	/six          	/seven        	
/eight        	/nine         	/colon        	/semicolon    	
/less         	/equal        	/greater      	/question     	
/at           	/A            	/B            	/C            	
/D            	/E            	/F            	/G            	
/H            	/I            	/J            	/K            	
/L            	/M            	/N            	/O            	
/P            	/Q            	/R            	/S            	
/T            	/U            	/V            	/W            	
/X            	/Y            	/Z            	/bracketleft  	
/backslash    	/bracketright 	/asciicircum  	/underscore   	
/quoteleft    	/a            	/b            	/c            	
/d            	/e            	/f            	/g            	
/h            	/i            	/j            	/k            	
/l            	/m            	/n            	/o            	
/p            	/q            	/r            	/s            	
/t            	/u            	/v            	/w            	
/x            	/y            	/z            	/braceleft    	
/bar          	/braceright   	/tilde        	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/.notdef      	/.notdef      	/.notdef      	/.notdef      	
/space        	/exclamdown   	/cent         	/sterling     	
/currency     	/yen          	/brokenbar    	/section      	
/dieresis     	/copyright    	/ordfeminine  	/guillemotleft	
/logicalnot   	/hyphen       	/registered   	/macron       	
/degree       	/plusminus    	/twosuperior  	/threesuperior	
/acute        	/mu           	/paragraph    	/bullet       	
/cedilla      	/onesuperior  	/ordmasculine 	/guillemotright	
/onequarter   	/onehalf      	/threequarters	/questiondown 	
/Agrave       	/Aacute       	/Acircumflex  	/Atilde       	
/Adieresis    	/Aring        	/AE           	/Ccedilla     	
/Egrave       	/Eacute       	/Ecircumflex  	/Edieresis    	
/Igrave       	/Iacute       	/Icircumflex  	/Idieresis    	
/Eth          	/Ntilde       	/Ograve       	/Oacute       	
/Ocircumflex  	/Otilde       	/Odieresis    	/multiply     	
/Oslash       	/Ugrave       	/Uacute       	/Ucircumflex  	
/Udieresis    	/Yacute       	/Thorn        	/germandbls   	
/agrave       	/aacute       	/acircumflex  	/atilde       	
/adieresis    	/aring        	/ae           	/ccedilla     	
/egrave       	/eacute       	/ecircumflex  	/edieresis    	
/igrave       	/iacute       	/icircumflex  	/idieresis    	
/eth          	/ntilde       	/ograve       	/oacute       	
/ocircumflex  	/otilde       	/odieresis    	/divide       	
/oslash       	/ugrave       	/uacute       	/ucircumflex  	
/udieresis    	/yacute       	/thorn        	/ydieresis    	
] def
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Courier
/HFpt_w 10 def
/HFpt_h 10 def
/Courier-Bold /HF-gs-font MF
/HF /HF-gs-font findfont [HFpt_w 0 0 HFpt_h 0 0] makefont def
/Courier /F-gs-font MF
/F-gs-font 10 10 SF
/#copies 1 def
% Pagedevice definitions:
gs_languagelevel 1 gt {
  <<
    /PageSize [595 842] 
  >> setpagedevice
} if
%%BeginResource: procset Enscript-Header-simple 1.6.5 90

/do_header {	% print default simple header
  gsave
    d_header_x d_header_y HFpt_h 3 div add translate

    HF setfont
    user_header_p {
      5 0 moveto user_header_left_str show

      d_header_w user_header_center_str stringwidth pop sub 2 div
      0 moveto user_header_center_str show

      d_header_w user_header_right_str stringwidth pop sub 5 sub
      0 moveto user_header_right_str show
    } {
      5 0 moveto fname show
      45 0 rmoveto fmodstr show
      45 0 rmoveto pagenumstr show
    } ifelse

  grestore
} def
%%EndResource
/d_page_w 559 def
/d_page_h 770 def
/d_header_x 0 def
/d_header_y 755 def
/d_header_w 559 def
/d_header_h 15 def
/d_footer_x 0 def
/d_footer_y 0 def
/d_footer_w 559 def
/d_footer_h 0 def
/d_output_w 559 def
/d_output_h 755 def
/cols 1 def
%%EndSetup
%%Page: (1) 1
%%BeginPageSetup
_S
18 36 translate
/pagenum 1 def
/fname (myPhoneBook.bash) def
/fdir (.) def
/ftail (myPhoneBook.bash) def
% User defined strings:
/fmodstr (Thu Feb 18 03:15:32 2021) def
/pagenumstr (1) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(#!/bin/bash) s
5 731 M
(#create local variable called "file" to carry database file name) s
5 720 M
(file=phonebooklist.txt) s
5 709 M
(# local variable to use in loops) s
5 698 M
(i=0) s
5 687 M
(#check if file is not exist) s
5 676 M
(if ! [ -f "$file" ]; then  #will enter the condition if file not exist ) s
5 665 M
(        #create the file ) s
5 654 M
(    touch phonebooklist.txt) s
5 643 M
(#end if ) s
5 632 M
(fi) s
5 621 M
(#function to show all available options than can be run with our  ) s
5 610 M
(viewMenu\(\)) s
5 599 M
({) s
5 588 M
(        # Print script options) s
5 577 M
(        echo "-i to add new phone contact" ) s
5 566 M
(        echo "-v to view all contacts") s
5 555 M
(        echo "-s to search for phone record") s
5 544 M
(        echo "-e to delete all phone contacts") s
5 533 M
(        echo "-d to delete one contact") s
5 522 M
(}) s
5 500 M
(#function to take input from terminal and save it in the file) s
5 489 M
(add\(\)) s
5 478 M
({) s
5 467 M
(        #print message to inform user with the option functionality ) s
5 456 M
(        echo "Create a new Record") s
5 445 M
(        ) s
5 434 M
(        #print message to help user know what should be entered) s
5 423 M
(        #then takes the input in variable FirstName) s
5 412 M
(        read -p "Enter First Name: " FirstName) s
5 401 M
(        if [ -z $FirstName ] ; then) s
5 390 M
(                echo "Input Error: First Name cannot be empty .") s
5 379 M
(                echo " The valid format is  : First Name  Last Name  Phone Number and non o) s
5 368 M
(f them can be empty.") s
5 357 M
(                exit 0) s
5 346 M
(        fi) s
5 335 M
(        #print message to help user know what should be entered) s
5 324 M
(        #then takes the input in variable LastName) s
5 313 M
(        read -p "Enter Last Name: " LastName) s
5 302 M
(        ) s
5 291 M
(        #print message to help user know what should be entered) s
5 280 M
(        #then takes the input in variable PhoneNumber) s
5 269 M
(        read -p "Enter phone number: " PhoneNumber) s
5 258 M
(        ) s
5 247 M
(        #push the 3 values first name, last name and phone number in the file) s
5 236 M
(        echo $FirstName $LastName $PhoneNumber >> $file) s
5 225 M
(}) s
5 203 M
(#function to look for contact) s
5 192 M
(search\(\)) s
5 181 M
({) s
5 170 M
(        #print message to inform user with the option functionality ) s
5 159 M
(        echo "Search for contact") s
5 148 M
(        ) s
5 137 M
(        #print message to help user know what should be entered) s
5 126 M
(        #then takes the input in variable "search" ) s
5 115 M
(        read -p "Enter First or Last Name or phone number : " search) s
5 104 M
(        ) s
5 93 M
(        if [ -z $search ] ; then) s
5 82 M
(                echo "invalid format.") s
5 71 M
(                exit 0) s
5 60 M
(        fi) s
5 49 M
(        #using grep command to search in the file ) s
5 38 M
(        #search for the "search" varaible content in the "file" that holds file name) s
5 27 M
(        #return the grep value to be stored in varaible "found") s
5 16 M
(        found=$\(grep $search $file\)) s
5 5 M
(        ) s
_R
S
%%Page: (2) 2
%%BeginPageSetup
_S
18 36 translate
/pagenum 2 def
/fname (myPhoneBook.bash) def
/fdir (.) def
/ftail (myPhoneBook.bash) def
% User defined strings:
/fmodstr (Thu Feb 18 03:15:32 2021) def
/pagenumstr (2) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        #-z => string is null, that is, has zero length) s
5 731 M
(        #check if the varaible "found" is null  ) s
5 720 M
(        if  [ -z "$found" ] ;then #found is null) s
5 709 M
(                ) s
5 698 M
(                #print that no item found) s
5 687 M
(                echo "No Item found") s
5 676 M
(        ) s
5 665 M
(        #otherwise if the found is not null) s
5 654 M
(        else ) s
5 643 M
(                ) s
5 632 M
(                #read found line by line ) s
5 621 M
(                cat found | while read -r line ; do) s
5 610 M
(                        ) s
5 599 M
(                        # count line number) s
5 588 M
(                        i=$[ $i +1 ]) s
5 577 M
(                        ) s
5 566 M
(                        # line number and line content ) s
5 555 M
(                        echo "$i $line") s
5 544 M
(                done) s
5 533 M
(        fi) s
5 522 M
(}) s
5 500 M
(#function to view all contacts) s
5 489 M
(viewAll\(\)) s
5 478 M
({) s
5 467 M
(        #print message to inform user with the option functionality ) s
5 456 M
(        echo "Viewing all contacts list") s
5 445 M
(        ) s
5 434 M
(        #read file line by line ) s
5 423 M
(        cat $file | while read line ; do) s
5 412 M
(        ) s
5 401 M
(                #count line index number) s
5 390 M
(                i=$[ $i +1 ]) s
5 379 M
(                ) s
5 368 M
(                #print line index and  line contents) s
5 357 M
(        echo "$i $line") s
5 346 M
(        done) s
5 335 M
(}) s
5 313 M
(#function to delete all contacts) s
5 302 M
(deleteAll\(\)) s
5 291 M
({) s
5 280 M
(        #print message to inform user with the option functionality ) s
5 269 M
(        echo "Delete all contacts") s
5 258 M
(         ) s
5 247 M
(         #override on the file to clear its content ) s
5 236 M
(         > $file) s
5 225 M
(}) s
5 203 M
(#define to delete specific contact) s
5 192 M
(deleteContact\(\)) s
5 181 M
({) s
5 170 M
(        #print message to inform user with the option functionality ) s
5 159 M
(        echo "Search a Record") s
5 148 M
(        ) s
5 137 M
(        #print message to help user know what should be entered) s
5 126 M
(        #then takes the input in variable search) s
5 115 M
(        read -p "Enter First or last Name or phone number of the record you wanna delete : ) s
5 104 M
(" search) s
5 93 M
(        if [ -z $search ] ; then) s
5 82 M
(                echo "invalid format.") s
5 71 M
(                exit 0) s
5 60 M
(        fi) s
5 49 M
(        #using grep command to search in the file ) s
5 38 M
(        #search for the "search" varaible content in the "file" that holds file name) s
5 27 M
(        #return the grep value to be stored in varaible "found") s
5 16 M
(        found=$\(grep $search $file\)) s
5 5 M
(        ) s
_R
S
%%Page: (3) 3
%%BeginPageSetup
_S
18 36 translate
/pagenum 3 def
/fname (myPhoneBook.bash) def
/fdir (.) def
/ftail (myPhoneBook.bash) def
% User defined strings:
/fmodstr (Thu Feb 18 03:15:32 2021) def
/pagenumstr (3) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(        #-z => string is null, that is, has zero length) s
5 731 M
(        #check if the varaible "found" is null  ) s
5 720 M
(        if  [ -z "$found" ] ;then #found is null) s
5 709 M
(                ) s
5 698 M
(                #print that no item found) s
5 687 M
(                echo "No Item found") s
5 676 M
(        ) s
5 665 M
(        #otherwise if the found is not null) s
5 654 M
(        else ) s
5 643 M
(                ) s
5 632 M
(                #read found line by line ) s
5 621 M
(                grep $search $file | while read -r line ; do) s
5 610 M
(                        ) s
5 599 M
(                        # count line number) s
5 588 M
(                        i=$[ $i +1 ]) s
5 577 M
(                        ) s
5 566 M
(                        # line number and line content ) s
5 555 M
(                        echo "$i $line") s
5 544 M
(        done) s
5 533 M
(        ) s
5 522 M
(        #print message to help user know what should be entered) s
5 511 M
(        #then takes the input in variable deleteNo) s
5 500 M
(        read -p "Enter index of the line  you wanna delete: " deleteNo) s
5 489 M
(        ) s
5 478 M
(        #local variable to store line index ) s
5 467 M
(        i=0) s
5 456 M
(        ) s
5 445 M
(        #read found line by line ) s
5 434 M
(        grep $search $file | while read -r line ; do) s
5 423 M
(        ) s
5 412 M
(                # count line number) s
5 401 M
(                i=$[ $i +1 ]) s
5 390 M
(                ) s
5 379 M
(                #check if the line index is the index of the element to be deleted ) s
5 368 M
(                if [ $deleteNo -eq $i ] ;then) s
5 357 M
(                ) s
5 346 M
(                        # delete the line and update the file) s
5 335 M
(                        echo "`sed  /"$line"/d  database.txt`" > $file) s
5 324 M
(                fi) s
5 313 M
(        done) s
5 302 M
(        ) s
5 291 M
(        fi) s
5 280 M
(}) s
5 258 M
(#if the user run the script without choosing any option) s
5 247 M
(if [ $# == 1 ] || [ $# == 0 ] ; then) s
5 236 M
(        if [ -z $1 ] ; then) s
5 225 M
(                viewMenu) s
5 214 M
(        # -i => inserting new contacts) s
5 203 M
(        elif [ $1 == "-i" ] ;then) s
5 192 M
(                echo "entered if condtion") s
5 181 M
(                add) s
5 170 M
(        # -s =>  searching for contact\(s\)) s
5 159 M
(        elif [ $1 == "-s" ] ;then) s
5 148 M
(                search) s
5 137 M
(        # -v => view all option) s
5 126 M
(        elif [ $1 == "-v" ] ;then) s
5 115 M
(                viewAll) s
5 104 M
(        # -e => delete all option) s
5 93 M
(        elif [ $1 == "-e" ] ;then) s
5 82 M
(                deleteAll) s
5 71 M
(        # -d => delete contact) s
5 60 M
(        elif [ $1 == "-d" ] ; then) s
5 49 M
(                deleteContact) s
5 27 M
(        else ) s
5 16 M
(                echo "Not valid prompt input.") s
5 5 M
(                echo " You can enter : ") s
_R
S
%%Page: (4) 4
%%BeginPageSetup
_S
18 36 translate
/pagenum 4 def
/fname (myPhoneBook.bash) def
/fdir (.) def
/ftail (myPhoneBook.bash) def
% User defined strings:
/fmodstr (Thu Feb 18 03:15:32 2021) def
/pagenumstr (4) def
/user_header_p false def
/user_footer_p false def
%%EndPageSetup
do_header
5 742 M
(                viewMenu) s
5 731 M
(        fi) s
5 720 M
(else ) s
5 709 M
(        echo "Too many arguments. expected only one argument of these menu") s
5 698 M
(        viewMenu) s
5 687 M
(fi ) s
_R
S
%%Trailer
%%Pages: 4
%%DocumentNeededResources: font Courier-Bold Courier 
%%EOF
